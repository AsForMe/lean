image: Visual Studio 2017
skip_branch_with_pr: true
environment:
  MSYSTEM: MINGW64  # use MSYS2 shell
  CYG_ROOT: C:/cygwin
  CYG_CACHE: C:/cygwin/var/cache/setup
  CYG_MIRROR: http://mirrors.kernel.org/sourceware/cygwin/
  VSVER: 15
  matrix:
  - CFG: MINGW64
    UPLOAD: ON
  - CFG: MSVC

cache: c:\tools\vcpkg\installed\

install:
  # upgrade git for vcpkg: https://github.com/appveyor/ci/issues/2097
  - if %CFG% == MSVC (choco upgrade git -y & vcpkg install mpir:x64-windows)

  # install cygwin
  - ps: >-
      If ($env:Platform -Match "x86") {
          $env:VCVARS_PLATFORM="x86"
          $env:BUILD="i686-pc-cygwin"
          $env:HOST="i686-pc-cygwin"
          $env:MSVCC="/cygdrive/c/projects/lean/libffi-3.3-rc0/msvcc.sh"
          $env:SRC_ARCHITECTURE="x86"
        } ElseIf ($env:Platform -Match "arm") {
          $env:VCVARS_PLATFORM="x86_arm"
          $env:BUILD="i686-pc-cygwin"
          $env:HOST="arm-w32-cygwin"
          $env:MSVCC="/cygdrive/c/projects/lean/libffi-3.3-rc0/msvcc.sh -marm"
          $env:SRC_ARCHITECTURE="arm"
        } Else {
          $env:VCVARS_PLATFORM="amd64"
          $env:BUILD="x86_64-w64-cygwin"
          $env:HOST="x86_64-w64-cygwin"
          $env:MSVCC="/cygdrive/c/projects/lean/libffi-3.3-rc0/msvcc.sh -m64"
          $env:SRC_ARCHITECTURE="x86"
      }
  - 'appveyor DownloadFile https://cygwin.com/setup-x86.exe -FileName setup.exe'
  - 'setup.exe -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P dejagnu >NUL'
  - '%CYG_ROOT%/bin/bash -lc "cygcheck -dc cygwin"'
  - echo call VsDevCmd to set VS150COMNTOOLS
  - call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat"
  - ps: $env:VSCOMNTOOLS=(Get-Content ("env:VS" + "$env:VSVER" + "0COMNTOOLS"))
  - echo "Using Visual Studio %VSVER%.0 at %VSCOMNTOOLS%"
  - call "%VSCOMNTOOLS%..\..\vc\Auxiliary\Build\vcvarsall.bat" %VCVARS_PLATFORM%

  # through cyg-get
  # - alias cyg-get="setup.exe -q -P"
  - pip install paramiko --force-reinstall
  - choco install libffi-dev
  # - setup.exe -q -P cygwin32-gcc-g++
  # - gcc-core gcc-g++ git libffi-devel nano openssl openssl-devel python-crypto python2 python2-devel python2-openssl python2-pip python2-setuptools tree

  # # install libffi
  # - 'appveyor DownloadFile https://github.com/libffi/libffi/releases/download/v3.3-rc0/libffi-3.3-rc0.tar.gz -FileName libffi-3.3-rc0.tar.gz'
  # - pwd
  # - c:\cygwin\bin\sh -lc 'pwd'
  # - c:\cygwin\bin\sh -lc 'echo $OLDPWD'
  # - c:\cygwin\bin\sh -lc '(cd $OLDPWD; tar xvzf libffi-3.3-rc0.tar.gz)'
  # - cd libffi-3.3-rc0
  # - ls
  # # - sh ./configure --disable-docs CC='%MSVCC%' CXX='%MSVCC%' LD=link CPP="cl -nologo -EP"
  # # - sh -lc 'make'
  # # - sh -lc 'make install'
  # # - c:\cygwin\bin\sh -lc "(cd $OLDPWD; ./configure CC='%MSVCC%' CXX='%MSVCC%' LD='link' CPP='cl -nologo -EP' CXXCPP='cl -nologo -EP' CPPFLAGS='-DFFI_BUILDING_DLL' AR='/cygdrive/c/projects/lean/libffi-3.3-rc0/.travis/ar-lib lib' NM='dumpbin -symbols' STRIP=':' --build=$BUILD --host=$HOST;)"
  # - c:\cygwin\bin\sh -lc "(cd $OLDPWD; ./configure CC='%MSVCC%' CXX='%MSVCC%' LD='link' CPP='cl -nologo -EP' CXXCPP='cl -nologo -EP' AR='/cygdrive/c/projects/lean/libffi-3.3-rc0/.travis/ar-lib lib' NM='dumpbin -symbols' STRIP=':' --build=$BUILD --host=$HOST;)"
  # - c:\cygwin\bin\sh -lc '(cd $OLDPWD; make;)'
  # - c:\cygwin\bin\sh -lc "(cd $OLDPWD; cp src/%SRC_ARCHITECTURE%/ffitarget.h include; make; find .;)"
  # # - c:\cygwin\bin\sh -lc "(cd $OLDPWD; cp `find . -name 'libffi-?.dll'` $HOST/testsuite/; make check; cat `find ./ -name libffi.log`)"
  # - c:\cygwin\bin\sh -lc '(cd $OLDPWD; make install;)'

build_script:
  - call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
  - cd %APPVEYOR_BUILD_FOLDER% && mkdir build && cd build
  # disable slow LTO
  - if %CFG% == MSVC (cmake ../src
      -DCMAKE_BUILD_TYPE=Release
      -DCMAKE_TOOLCHAIN_FILE=c:/tools/vcpkg/scripts/buildsystems/vcpkg.cmake
      -DLEAN_EXTRA_CXX_FLAGS=/GL-
      -DLEAN_EXTRA_LINKER_FLAGS_MSVC=/LTCG:OFF
      -G "NMake Makefiles" &&
      cmake --build .)
  - if %CFG% == MINGW64 (C:\msys64\usr\bin\bash -lc "exec 0</dev/null && cd $APPVEYOR_BUILD_FOLDER/build &&
      OPTIONS='';
      if [[ $APPVEYOR_SCHEDULED_BUILD == True ]]; then . ../script/setup_nightly.sh; fi &&
      cmake ../src -DINCLUDE_MSYS2_DLLS=ON -DCMAKE_BUILD_TYPE=Release $OPTIONS -G 'Unix Makefiles' &&
      cmake --build . &&
      cpack")

test_script:
  - C:\msys64\usr\bin\bash -lc "exec 0</dev/null && cd $APPVEYOR_BUILD_FOLDER/build && ctest -j4 --output-on-failure"
  # don't test packages when building nightly
  - C:\msys64\usr\bin\bash -lc "exec 0</dev/null && cd $APPVEYOR_BUILD_FOLDER/packages &&
      if [[ ! -f ../build/nightly.sh ]]; then
        ../bin/leanpkg configure &&
        for d in _target/deps/*; do (cd $d; ../../../../bin/leanpkg test || exit 1); done;
      fi"
  - C:\msys64\usr\bin\bash -lc "exec 0</dev/null && cd $APPVEYOR_BUILD_FOLDER &&
      if [[ $UPLOAD == ON && $GH_TOKEN && $APPVEYOR_REPO_BRANCH == master && -f build/nightly.sh ]]; then
        . build/nightly.sh &&
        bash script/deploy_nightly.sh build/lean-*-windows.zip;
      fi"

artifacts:
  - path: build\lean-*-windows.zip
    name: binary

deploy:
  description: 'Lean release'
  provider: GitHub
  auth_token:
    secure: d+yPrDEAbiNrcf3a0PDNYEn/ieOOP6M7cP9zje+QkJEjHFdjBjWMe8b3qrC1hrus
  artifact: binary
  draft: false
  prerelease: false
  on:
    appveyor_repo_tag: true
    UPLOAD: ON
