name: CI
on:
  push:
    branches:
      - test-actions
    tags:
      - '*'
  pull_request:
    branches:
      - test-actions

jobs:
  Build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # NOTE: must list all targets in `include` here to activate them
        name: ["Linux Upload","Linux clang Debug","Linux gcc-4.9 Debug","Linux gcc-4.9 Release","Linux gcc-6 Release","Linux gcc-6 Release COV","Linux clang Release MT","Linux gcc-6 Release MT","Windows","Windows 64bits","macOS clang","macOS gcc"]
        include:
          - name: Linux Upload
            os: ubuntu-latest
            CMAKE_CXX_COMPILER: g++-4.9
            CMAKE_BUILD_TYPE: Release
            UPLOAD: ON
            STATIC: ON
            FIRST: 1
          - name: Linux clang Release MT
            os: ubuntu-latest
            CMAKE_CXX_COMPILER: clang++-3.5
            CMAKE_BUILD_TYPE: Release
            LEAN_EXTRA_MAKE_OPTS: -t0
            TCMALLOC: ON
          - name: Linux gcc-6 Release MT
            os: ubuntu-latest
            CMAKE_CXX_COMPILER: g++-6
            CMAKE_BUILD_TYPE: Release
            TCMALLOC: ON
          - name: Linux gcc-6 Release COV
            os: ubuntu-latest
            CMAKE_CXX_COMPILER: g++-6
            CMAKE_BUILD_TYPE: Release
            TESTCOV: ON
          - name: Linux gcc-6 Release
            os: ubuntu-latest
            CMAKE_CXX_COMPILER: g++-6
            CMAKE_BUILD_TYPE: Release
            MULTI_THREAD: OFF
          - name: Linux gcc-4.9 Release
            os: ubuntu-latest
            CMAKE_CXX_COMPILER: g++-4.9
            CMAKE_BUILD_TYPE: Release
            TEST: OFF
            TEST_LEANPKG_REGISTRY: ON
          - name: Linux clang Debug
            os: ubuntu-latest
            CMAKE_CXX_COMPILER: clang++-3.5
            CMAKE_BUILD_TYPE: Debug
            TCMALLOC: ON
          - name: Linux gcc-4.9 Debug
            os: ubuntu-latest
            CMAKE_CXX_COMPILER: g++-4.9
            CMAKE_BUILD_TYPE: Debug

          - name: macOS clang
            os: macos-latest
            CMAKE_CXX_COMPILER: clang++
            CMAKE_BUILD_TYPE: Release
            UPLOAD: ON
            TEST_LEANPKG_REGISTRY: ON
          - name: macOS gcc
            os: macos-latest
            CMAKE_CXX_COMPILER: g++
            CMAKE_BUILD_TYPE: Debug
          - name: Windows 64bits
            os: windows-latest
            CFG: MINGW64
            UPLOAD: ON
          - name: Windows
            os: windows-latest
            CFG: MSVC
      # complete all jobs
      fail-fast: false
    env:
      # must be inside workspace
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPRESS: true
      # current cache limit
      CCACHE_MAXSIZE: 200M
      CFG: ${{ matrix.CFG }}
      CMAKE_BUILD_TYPE: ${{ matrix.CMAKE_BUILD_TYPE }}
      CMAKE_CXX_COMPILER: ${{ matrix.CMAKE_CXX_COMPILER }}
      FIRST: ${{ matrix.FIRST }}
      LEAN_EXTRA_MAKE_OPTS: ${{ matrix.LEAN_EXTRA_MAKE_OPTS }}
      MULTI_THREAD: ${{ matrix.MULTI_THREAD }}
      STATIC: ${{ matrix.STATIC }}
      TCMALLOC: ${{ matrix.TCMALLOC }}
      TEST: ${{ matrix.TEST }}
      TESTCOV: ${{ matrix.TESTCOV }}
      TEST_LEANPKG_REGISTRY: ${{ matrix.TEST_LEANPKG_REGISTRY }}
      UPLOAD: ${{ matrix.UPLOAD }}
      # CXX_FAMILY: `echo $CMAKE_CXX_COMPILER | sed -n "s/\([^\+]*++\).*/\1/p"`
    steps:
      # - name: Install ccache
      #   run: apt get ccache
      #   if: matrix.os == 'ubuntu-latest'
      # - name: Install ccache
      #   run: brew install ccache
      #   if: matrix.os == 'macos-latest'
      - name: New vars
        run: export CXX_FAMILY=`echo $CMAKE_CXX_COMPILER | sed -n "s/\([^\+]*++\).*/\1/p"`;
           if [[ $TESTCOV != ON ]]; then echo "::set-env name=TESTCOV::OFF"; fi;
           if [[ $TCMALLOC != ON ]]; then echo "::set-env name=TCMALLOC::OFF"; fi;
           if [[ $STATIC != ON ]]; then echo "::set-env name=STATIC::OFF"; fi;
           if [[ $MULTI_THREAD != OFF ]]; then echo "::set-env name=MULTI_THREAD::ON"; fi;
           echo "::set-env name=CXX_FAMILY::$CXX_FAMILY"
        if: matrix.os != 'windows-latest'
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install scripts
        run: mkdir -p ~/bin/ ;
               chmod +x script/ccache-$CXX_FAMILY ;
               cp script/ccache-$CXX_FAMILY ~/bin/ ;
               export PATH="~/bin/:$PATH"
      - name: Install Nix
        uses: cachix/install-nix-action@v5
        if: matrix.os != 'windows-latest'
      - name: Install MSYS2
        uses: numworks/setup-msys2@v1
        if: matrix.os == 'windows-latest'
      # binaries segfault without this step (?!), must be separate step because it might update the MSYS2 runtime
      - name: Update MSYS2
        run: msys2do pacman -Syu --noconfirm
        if: matrix.os == 'windows-latest'
      - name: Cache
        uses: actions/cache@v1
        with:
          path: .ccache
          key: ${{ matrix.name }}-build-${{ github.sha }}
          # fall back to (latest) previous cache
          restore-keys: |
            ${{ matrix.name }}-build
      - name: Setup
        run: |
          # open shell once for initial setup
          nix-shell --run true
        if: matrix.os != 'windows-latest'
      - name: Setup
        run: msys2do pacman --noconfirm -S make python mingw-w64-x86_64-cmake mingw-w64-x86_64-clang mingw-w64-x86_64-ccache git diffutils
        if: matrix.os == 'windows-latest'
      - name: Setup
        run: msys2do choco upgrade git -y & vcpkg install mpir:x64-windows
        if: matrix.os == 'windows-latest' && matrix.CFG == 'MSVC'
      - name: Setup
        run: |
          # open shell once for initial setup
          nix-shell --run true
        if: matrix.os != 'windows-latest'
      - name: Setup
        run: mkdir build
      - name: Build
        run: nix-shell --run "bash script/ci.sh"
      - name: Build
        run: msys2do (cd build; C:\msys64\usr\bin\bash -lc "exec 0</dev/null && cd $APPVEYOR_BUILD_FOLDER/build &&
                  OPTIONS='';
                  cmake ../src -DINCLUDE_MSYS2_DLLS=ON -DCMAKE_BUILD_TYPE=Release $OPTIONS -G 'Unix Makefiles' &&
                  cmake --build . &&
                  cpack")
        if: matrix.os == 'windows-latest' && matrix.CFG == 'MINGW64'
      - name: Build
        run: msys2do (cd build; cmake ../src -DCMAKE_BUILD_TYPE=Release
              -DCMAKE_TOOLCHAIN_FILE=c:/tools/vcpkg/scripts/buildsystems/vcpkg.cmake
              -DLEAN_EXTRA_CXX_FLAGS=/GL-
              -DLEAN_EXTRA_LINKER_FLAGS_MSVC=/LTCG:OFF
              -G "NMake Makefiles" &&
              cmake --build .)
        if: matrix.os == 'windows-latest' && matrix.CFG == 'MSVC'
      - name: Test
        run: nix-shell --run "cd build; ctest -j --output-on-failure < /dev/null"
        if: matrix.os != 'windows-latest'
      - name: Test
        run: msys2do cd build; ctest -j --output-on-failure ^< /dev/null
        shell: cmd
        if: matrix.os == 'windows-latest'
      - name: CCache stats
        run: nix-shell --run "ccache -s"
        if: matrix.os != 'windows-latest'
      - name: CCache stats
        run: msys2do ccache -s
        if: matrix.os == 'windows-latest'
